services:
  # OpenTracing base
  opentracing.tracer.instana_rest:
    class: OpenTracing\Tracer
    factory: ['Instana\OpenTracing\InstanaTracer', restSdk]

  opentracing.tracer.instana_sensor:
    class: OpenTracing\Tracer
    factory: ['Instana\OpenTracing\InstanaTracer', phpSensor]

  opentracing.tracer.default:
    class: OpenTracing\Tracer

  # Doctrine
  CedricZiel\InstanaBundle\Doctrine\DbalLogger:
    arguments:
      - '@opentracing.tracer.default'

  # Controller resolving
  CedricZiel\InstanaBundle\Controller\TraceableArgumentResolver:
    decorates: 'argument_resolver'
    arguments:
      - '@CedricZiel\InstanaBundle\Controller\TraceableArgumentResolver.inner'
      - '@opentracing.tracer.default'

  CedricZiel\InstanaBundle\Controller\TraceableControllerResolver:
    decorates: 'controller_resolver'
    arguments:
      - '@CedricZiel\InstanaBundle\Controller\TraceableControllerResolver.inner'
      - '@opentracing.tracer.default'

  CedricZiel\InstanaBundle\EventDispatcher\TracingEventDispatcher:
    decorates: 'event_dispatcher'
    arguments: ['@CedricZiel\InstanaBundle\EventDispatcher\TracingEventDispatcher.inner', '@opentracing.tracer.default']

  CedricZiel\InstanaBundle\EventListener\RequestEventListener:
    arguments:
      - '@logger'
      - '@opentracing.tracer.default'
    tags:
      - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 2000 }
      - { name: kernel.event_listener, event: kernel.finish_request, method: onKernelFinishrequest }
      - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }
      - { name: kernel.event_listener, event: kernel.terminate, method: onKernelTerminate }
